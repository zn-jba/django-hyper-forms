type: edu
files:
- name: hyperforms/settings.py
  visible: true
  text: |
    """
    Django settings for hyperforms project.

    Generated by 'django-admin startproject' using Django 3.1.5.

    For more information on this file, see
    https://docs.djangoproject.com/en/3.1/topics/settings/

    For the full list of settings and their values, see
    https://docs.djangoproject.com/en/3.1/ref/settings/
    """
    import os
    from pathlib import Path

    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    BASE_DIR = Path(__file__).resolve().parent.parent


    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = 'yfgi45&m3!0c0xfqp$i&v*37^3aj71=*ft&3*c1lm0!#&@wf=p'

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True

    ALLOWED_HOSTS = []


    # Application definition

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'forms'
    ]

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    ROOT_URLCONF = 'hyperforms.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [os.path.join(BASE_DIR, 'templates')],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'hyperforms.wsgi.application'


    # Database
    # https://docs.djangoproject.com/en/3.1/ref/settings/#databases

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.environ.get('HYPERSKILL_TEST_DATABASE') or os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }


    # Password validation
    # https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]


    # Internationalization
    # https://docs.djangoproject.com/en/3.1/topics/i18n/

    LANGUAGE_CODE = 'en-us'

    TIME_ZONE = 'UTC'

    USE_I18N = True

    USE_L10N = True

    USE_TZ = True


    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/3.1/howto/static-files/

    STATIC_URL = '/static/'
  learner_created: false
- name: hyperforms/asgi.py
  visible: true
  text: |
    """
    ASGI config for hyperforms project.

    It exposes the ASGI callable as a module-level variable named ``application``.

    For more information on this file, see
    https://docs.djangoproject.com/en/3.1/howto/deployment/asgi/
    """

    import os

    from django.core.asgi import get_asgi_application

    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hyperforms.settings')

    application = get_asgi_application()
  learner_created: false
- name: hyperforms/urls.py
  visible: true
  text: |
    """hyperforms URL Configuration

    The `urlpatterns` list routes URLs to views. For more information please see:
        https://docs.djangoproject.com/en/3.1/topics/http/urls/
    Examples:
    Function views
        1. Add an import:  from my_app import views
        2. Add a URL to urlpatterns:  path('', views.home, name='home')
    Class-based views
        1. Add an import:  from other_app.views import Home
        2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
    Including another URLconf
        1. Import the include() function: from django.urls import include, path
        2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
    """
    from django.contrib import admin
    from django.urls import path, include

    urlpatterns = [
        path('admin/', admin.site.urls),
        path('', include('forms.urls')),
    ]
  learner_created: false
- name: templates/index.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Welcome</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: forms/__init__.py
  visible: true
  learner_created: false
- name: forms/admin.py
  visible: true
  text: |
    from django.contrib import admin

    # Register your models here.
  learner_created: false
- name: forms/apps.py
  visible: true
  text: |
    from django.apps import AppConfig


    class FormsConfig(AppConfig):
        name = 'forms'
  learner_created: false
- name: forms/models.py
  visible: true
  text: |
    from django.db import models

    # Create your models here.
  learner_created: false
- name: forms/tests.py
  visible: true
  text: |
    from django.test import TestCase

    # Create your tests here.
  learner_created: false
- name: forms/urls.py
  visible: true
  text: |
    from django.urls import path

    from . import views

    urlpatterns = [
    ]
  learner_created: false
- name: forms/views.py
  visible: true
  text: |
    from django.shortcuts import render

    # Create your views here.
  learner_created: false
- name: forms/migrations/__init__.py
  visible: true
  learner_created: false
- name: manage.py
  visible: true
  text: |
    #!/usr/bin/env python
    """Django's command-line utility for administrative tasks."""
    import os
    import sys


    def main():
        """Run administrative tasks."""
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hyperforms.settings')
        try:
            from django.core.management import execute_from_command_line
        except ImportError as exc:
            raise ImportError(
                "Couldn't import Django. Are you sure it's installed and "
                "available on your PYTHONPATH environment variable? Did you "
                "forget to activate a virtual environment?"
            ) from exc
        execute_from_command_line(sys.argv)


    if __name__ == '__main__':
        main()
  learner_created: false
- name: hyperforms/__init__.py
  visible: true
  learner_created: false
- name: hyperforms/wsgi.py
  visible: true
  text: |
    """
    WSGI config for hyperforms project.

    It exposes the WSGI callable as a module-level variable named ``application``.

    For more information on this file, see
    https://docs.djangoproject.com/en/3.1/howto/deployment/wsgi/
    """

    import os

    from django.core.wsgi import get_wsgi_application

    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hyperforms.settings')

    application = get_wsgi_application()
  learner_created: false
- name: tests.py
  visible: false
  text: "import sqlite3\nfrom copy import copy\nfrom itertools import repeat\nfrom\
    \ time import sleep\nfrom urllib.error import URLError\n\nimport requests\nfrom\
    \ hstest import *\n\nFORM_FIELDS = [\n    (\"name\", \"Your name\", \"text\",\
    \ 1),\n    (\"age\", \"Your age\", \"number\", 1),\n    (\"favorite_book\", \"\
    Your favorite book\", \"text\", 1)\n]\n\n\nclass HyperFormsUpdatingFieldsTest(DjangoTest):\n\
    \    use_database = True\n\n    def get_index_with_no_participants(self) -> CheckResult:\n\
    \        try:\n            index = self.read_page(self.get_url())\n          \
    \  if all(x in index.lower() for x in [\"no participants\", \"be the first\"]):\n\
    \                return CheckResult.correct()\n            else:\n           \
    \     return CheckResult.wrong(\n                    \"Seems like there is no\
    \ line telling a first visitor to become the first participant...\")\n       \
    \ except:\n            sleep(1)\n            raise\n\n    def create_form_and_fields(self)\
    \ -> CheckResult:\n        connection = sqlite3.connect(self.attach.test_database)\n\
    \        cursor = connection.cursor()\n        try:\n            cursor.execute(\n\
    \                \"\"\"INSERT INTO forms_formmodel (`name`)\n                VALUES\
    \ (?)\"\"\",\n                (\"participants\",))\n\n            cursor.executemany(\n\
    \                \"\"\"INSERT INTO forms_formfield (`name`, `label`, `type`, `form_id`)\
    \ \n                VALUES (?, ?, ?, ?)\"\"\",\n                FORM_FIELDS)\n\
    \            connection.commit()\n\n            cursor.execute('SELECT `name`,\
    \ `label`, `type`, `form_id` FROM forms_formfield')\n            result = cursor.fetchall()\n\
    \            for item in FORM_FIELDS:\n                if item not in result:\n\
    \                    return CheckResult.wrong(f\"Check your FormField model: couldn't\
    \ find the {item[0]} field.\")\n            return CheckResult.correct()\n\n \
    \       except sqlite3.DatabaseError as err:\n            return CheckResult.wrong(str(err))\n\
    \        except Exception as e:\n            print(\"An unexpected exception has\
    \ occurred: \", str(e))\n\n    def check_field(self, page, field_name):\n    \
    \    return all(x in page.lower() for x in [\"<input\", f'name=\"{field_name.lower()}\"\
    '])\n\n    def check_button(self, page, button_value):\n        return f'<button\
    \ type=\"submit\">{button_value}</button>'.lower() in page.lower()\n\n    def\
    \ get_register_page_with_form(self, fields_to_check):\n        try:\n        \
    \    register_page = self.read_page(self.get_url('register'))\n            if\
    \ all(list(map(self.check_field, repeat(register_page), fields_to_check))):\n\
    \                if self.check_button(register_page, \"Submit\"):\n          \
    \          return CheckResult.correct()\n                else:\n             \
    \       return CheckResult.wrong(\n                        'Register page should\
    \ contain a \"Submit\" button.'\n                    )\n            else:\n  \
    \              return CheckResult.wrong(\n                    'Register page should\
    \ contain all of three fields with names \"name\", \"age\", \"favorite_book\"\
    ')\n        except URLError:\n            return CheckResult.wrong('Cannot connect\
    \ to the register page.')\n\n    def fill_in_the_form(self, data_to_fill) -> CheckResult:\n\
    \        register_page = requests.get(self.get_url('register'))\n        post_data\
    \ = copy(data_to_fill)\n        post_data.update({\"csrfmiddlewaretoken\": register_page.cookies.get(\"\
    csrftoken\")})\n        filled_form = requests.post(self.get_url('register/'),\n\
    \                                    cookies={\"csrftoken\": register_page.cookies.get(\"\
    csrftoken\")},\n                                    data=post_data)\n        connection\
    \ = sqlite3.connect(self.attach.test_database)\n        cursor = connection.cursor()\n\
    \        cursor.execute('SELECT `value`, `record_id` FROM forms_formdata where\
    \ record_id=2')\n        result = cursor.fetchall()\n        if all(x[0].lower()\
    \ in list(map(str.lower, list(data_to_fill.values()))) for x in result):\n   \
    \         if all(x[1] == result[0][1] for x in result):\n                return\
    \ CheckResult.correct()\n            else:\n                return CheckResult.wrong(\"\
    Each form entry should be tied to one FormRecord.\")\n        else:\n        \
    \    return CheckResult.wrong(\"Seems like not everything inserted in the form\
    \ is not saved to FormData.\")\n\n    def check_data_on_index(self, data_to_check)\
    \ -> CheckResult:\n        index = self.read_page(self.get_url())\n        if\
    \ all(x in index.lower() for x in data_to_check):\n            if all(x not in\
    \ index.lower() for x in [\"no participants\", \"be the first\"]):\n         \
    \       return CheckResult.correct()\n            else:\n                return\
    \ CheckResult.wrong(\n                    \"If there are participants in the club,\
    \ the page should not tell people there are no participants!\")\n        else:\n\
    \            return CheckResult.wrong(\"Cannot see the inserted form data on the\
    \ main page!\")\n\n    def add_one_more_field(self) -> CheckResult:\n        connection\
    \ = sqlite3.connect(self.attach.test_database)\n        cursor = connection.cursor()\n\
    \        try:\n            cursor.execute(\n                \"\"\"INSERT INTO\
    \ forms_formfield (`name`, `label`, `type`, `form_id`) \n                VALUES\
    \ (?, ?, ?, ?)\"\"\",\n                (\"town\", \"Your town\", \"text\", 1))\n\
    \            connection.commit()\n\n            cursor.execute('SELECT `name`,\
    \ `label`, `type`, `form_id` FROM forms_formfield')\n            result = cursor.fetchall()\n\
    \            FORM_FIELDS.append((\"town\", \"Your town\", \"text\", 1))\n    \
    \        for item in FORM_FIELDS:\n                if item not in result:\n  \
    \                  return CheckResult.wrong(\"FormField doesn't seem to be saving\
    \ new fields correctly.\")\n            return CheckResult.correct()\n\n     \
    \   except sqlite3.DatabaseError as err:\n            return CheckResult.wrong(str(err))\n\
    \        except Exception as e:\n            print(\"An unexpected exception has\
    \ occurred: \", str(e))\n\n    @dynamic_test(order=1)\n    def test_get_index_no_participants(self):\n\
    \        return self.get_index_with_no_participants()\n\n    @dynamic_test(order=2)\n\
    \    def test_create_form_and_fields(self):\n        return self.create_form_and_fields()\n\
    \n    @dynamic_test(order=3)\n    def test_get_register_page_with_tree_fields(self):\n\
    \        return self.get_register_page_with_form([\"name\", \"age\", \"favorite_book\"\
    ])\n\n    @dynamic_test(order=4)\n    def test_post_form_three_fields(self):\n\
    \        return self.fill_in_the_form({\"name\": \"Boba\", \"age\": \"22\", \"\
    favorite_book\": \"Kuka\"})\n\n    @dynamic_test(order=5)\n    def test_inserted_data_on_index_three_fields(self):\n\
    \        return self.check_data_on_index([\"boba\", \"22\", \"kuka\"])\n\n   \
    \ @dynamic_test(order=6)\n    def test_add_one_more_field(self):\n        return\
    \ self.add_one_more_field()\n\n    @dynamic_test(order=7)\n    def test_post_form_with_new_field(self):\n\
    \        return self.fill_in_the_form({\"name\": \"Biba\", \"age\": \"44\", \"\
    favorite_book\": \"Keka\", \"town\": \"LolCity\"})\n\n    @dynamic_test(order=8)\n\
    \    def test_inserted_data_on_index_new(self):\n        return self.check_data_on_index([\"\
    boba\", \"22\", \"kuka\", \"biba\", \"44\", \"keka\", \"lolcity\"])\n\n\nif __name__\
    \ == '__main__':\n    HyperFormsUpdatingFieldsTest().run_tests()\n"
  learner_created: false
feedback_link: https://hyperskill.org/projects/172/stages/892/implement#comment
status: Unchecked
record: -1
