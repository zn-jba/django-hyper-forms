type: edu
files:
- name: hyperforms/settings.py
  visible: true
  text: |
    """
    Django settings for hyperforms project.

    Generated by 'django-admin startproject' using Django 3.1.5.

    For more information on this file, see
    https://docs.djangoproject.com/en/3.1/topics/settings/

    For the full list of settings and their values, see
    https://docs.djangoproject.com/en/3.1/ref/settings/
    """
    import os
    from pathlib import Path

    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    BASE_DIR = Path(__file__).resolve().parent.parent


    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = 'yfgi45&m3!0c0xfqp$i&v*37^3aj71=*ft&3*c1lm0!#&@wf=p'

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True

    ALLOWED_HOSTS = []


    # Application definition

    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'forms'
    ]

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]

    ROOT_URLCONF = 'hyperforms.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [os.path.join(BASE_DIR, 'templates')],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]

    WSGI_APPLICATION = 'hyperforms.wsgi.application'


    # Database
    # https://docs.djangoproject.com/en/3.1/ref/settings/#databases

    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.environ.get('HYPERSKILL_TEST_DATABASE') or os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }


    # Password validation
    # https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]


    # Internationalization
    # https://docs.djangoproject.com/en/3.1/topics/i18n/

    LANGUAGE_CODE = 'en-us'

    TIME_ZONE = 'UTC'

    USE_I18N = True

    USE_L10N = True

    USE_TZ = True


    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/3.1/howto/static-files/

    STATIC_URL = '/static/'
  learner_created: false
- name: hyperforms/asgi.py
  visible: true
  text: |
    """
    ASGI config for hyperforms project.

    It exposes the ASGI callable as a module-level variable named ``application``.

    For more information on this file, see
    https://docs.djangoproject.com/en/3.1/howto/deployment/asgi/
    """

    import os

    from django.core.asgi import get_asgi_application

    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hyperforms.settings')

    application = get_asgi_application()
  learner_created: false
- name: hyperforms/urls.py
  visible: true
  text: |
    """hyperforms URL Configuration

    The `urlpatterns` list routes URLs to views. For more information please see:
        https://docs.djangoproject.com/en/3.1/topics/http/urls/
    Examples:
    Function views
        1. Add an import:  from my_app import views
        2. Add a URL to urlpatterns:  path('', views.home, name='home')
    Class-based views
        1. Add an import:  from other_app.views import Home
        2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
    Including another URLconf
        1. Import the include() function: from django.urls import include, path
        2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
    """
    from django.contrib import admin
    from django.urls import path, include

    urlpatterns = [
        path('admin/', admin.site.urls),
        path('', include('forms.urls')),
    ]
  learner_created: false
- name: templates/index.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Welcome</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: forms/__init__.py
  visible: true
  learner_created: false
- name: forms/admin.py
  visible: true
  text: |
    from django.contrib import admin

    # Register your models here.
  learner_created: false
- name: forms/apps.py
  visible: true
  text: |
    from django.apps import AppConfig


    class FormsConfig(AppConfig):
        name = 'forms'
  learner_created: false
- name: forms/models.py
  visible: true
  text: |
    from django.db import models

    # Create your models here.
  learner_created: false
- name: forms/tests.py
  visible: true
  text: |
    from django.test import TestCase

    # Create your tests here.
  learner_created: false
- name: forms/urls.py
  visible: true
  text: |
    from django.urls import path

    from . import views

    urlpatterns = [
    ]
  learner_created: false
- name: forms/views.py
  visible: true
  text: |
    from django.shortcuts import render

    # Create your views here.
  learner_created: false
- name: forms/migrations/__init__.py
  visible: true
  learner_created: false
- name: manage.py
  visible: true
  text: |
    #!/usr/bin/env python
    """Django's command-line utility for administrative tasks."""
    import os
    import sys


    def main():
        """Run administrative tasks."""
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hyperforms.settings')
        try:
            from django.core.management import execute_from_command_line
        except ImportError as exc:
            raise ImportError(
                "Couldn't import Django. Are you sure it's installed and "
                "available on your PYTHONPATH environment variable? Did you "
                "forget to activate a virtual environment?"
            ) from exc
        execute_from_command_line(sys.argv)


    if __name__ == '__main__':
        main()
  learner_created: false
- name: hyperforms/__init__.py
  visible: true
  learner_created: false
- name: hyperforms/wsgi.py
  visible: true
  text: |
    """
    WSGI config for hyperforms project.

    It exposes the WSGI callable as a module-level variable named ``application``.

    For more information on this file, see
    https://docs.djangoproject.com/en/3.1/howto/deployment/wsgi/
    """

    import os

    from django.core.wsgi import get_wsgi_application

    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hyperforms.settings')

    application = get_wsgi_application()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    import os

    import requests
    from hstest import *


    class HyperFormsSavingFormDataTest(DjangoTest):
        use_database = True

        def get_index_with_no_participants(self) -> CheckResult:
            index = self.read_page(self.get_url())
            if all(x in index.lower() for x in ["no participants","be the first"]):
                return CheckResult.correct()
            else:
                return CheckResult.wrong("Seems like there is no line telling the first visitor to become the first participant...")

        def fill_in_the_form(self) -> CheckResult:
            register_page = requests.get(self.get_url('register'))
            filled_form = requests.post(self.get_url('register/'), cookies={"csrftoken": register_page.cookies.get("csrftoken")},
                                        data={"csrfmiddlewaretoken": register_page.cookies.get("csrftoken"),
                                              "name": "Boba", "age": "22", "favorite_book": "Kuka"})
            index = self.read_page(self.get_url())
            if all(x in index.lower() for x in ["name", "age", "favorite book", "boba", "22","kuka"]):
                if all(x not in index.lower() for x in ["no participants", "be the first"]):
                    return CheckResult.correct()
                else:
                    return CheckResult.wrong("If there are participants in the club, the page should not tell people there are no participants!")
            else:
                return CheckResult.wrong("Cannot see the inserted form data on the main page!")

        @dynamic_test(order=1)
        def test_get_index_no_participants(self):
            return self.get_index_with_no_participants()

        @dynamic_test(order=2)
        def test_post_form(self):
            return self.fill_in_the_form()


    if __name__ == '__main__':
        HyperFormsSavingFormDataTest().run_tests()
  learner_created: false
- name: forms/templates/forms/register.html
  visible: true
  text: |-
    {% extends "forms/base.html" %}

    {% block page_content %}
        <main>
            <form action="" method="post" novalidate>
                {% csrf_token %}
                {% if form %}
                    {{ form }}
                {% else %}
                    <label for="name">your name</label><br>
                    <input type="text" id="name" name="name"><br>
                    <label for="age">your age</label><br>
                    <input type="text" id="age" name="age"><br>
                    <label for="favorite_book">your favorite book</label><br>
                    <input type="text" id="favorite_book" name="favorite_book"><br>
                {% endif %}
                <button type="submit">Submit</button>
            </form>
        </main>
    {% endblock %}
  learner_created: true
- name: forms/forms.py
  visible: true
  text: |
    from django import forms


    class RegisterForm(forms.Form):
        name = forms.CharField(label="your name", max_length=64)
        age = forms.IntegerField(label="your age")
        favorite_book = forms.CharField(label="your favorite book")
  learner_created: true
- name: forms/templates/forms/index.html
  visible: true
  text: |-
    {% extends "forms/base.html" %}

    {% block page_content %}
        <main>
            <h2>Welcome to the reading club</h2>
            <p>The link to the introduction form is coming soon</p>
        </main>
    {% endblock %}
  learner_created: true
- name: forms/templates/forms/base.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="utf-8">
        <title>HyperForms</title>
    </head>
    <body>

    {% block page_content %}{% endblock %}

    </body>
    </html>
  learner_created: true
feedback_link: https://hyperskill.org/projects/172/stages/891/implement#comment
status: Unchecked
record: -1
